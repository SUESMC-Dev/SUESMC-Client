# Manually build and release artifacts instead of using tauri-actions
# Reasons:
# 1. Include OS name in output filenames (tauri-actions doesn't support this)
# 2. Publish portable .exe for Windows (unsupported by tauri-actions either)
name: Release

on:
    workflow_dispatch:
      inputs:
        version:
          description: 'Version to release (e.g., 1.2.3). If empty, uses package.json or package.json+commit hash.'
          required: false
          type: string

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Version-Check:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check-tag.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      
      - name: Check version consistency
        run: npm run version check

      - name: Check Tag Version
        id: check-tag
        shell: bash
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          echo "Package version: $PKG_VERSION"
          
          # For manual runs, allow optional input.version to override
          if [[ -n "${{ github.event.inputs.version }}" ]]; then
            PKG_VERSION="${{ github.event.inputs.version }}"
            echo "Using manual input version: $PKG_VERSION"
          else
            # For non-tag manual runs, append short commit hash to package.json version
            COMMIT_HASH=$(git rev-parse HEAD)
            COMMIT_HASH=${COMMIT_HASH:0:6}
            PKG_VERSION="$PKG_VERSION"-"$COMMIT_HASH"
            echo "No manual version provided, using package version with commit hash: $PKG_VERSION"
          fi
          
          # Set the version as output
          echo "version=$PKG_VERSION" >> $GITHUB_OUTPUT

  Build-and-Release:
    needs: [Version-Check]
    uses: ./.github/workflows/build.yml
    with:
      version: ${{ needs.Version-Check.outputs.version }}
      upload_artifacts: true
    secrets:
      SJMCL_CURSEFORGE_API_KEY: ${{ secrets.SJMCL_CURSEFORGE_API_KEY }}

  # macOS signing is disabled in this fork (Windows x64 portable only)

  Create-Release:
    needs: [Version-Check, Build-and-Release]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Windows x64 artifact only
        uses: actions/download-artifact@v4
        with:
          name: SUESMC-Client_${{ needs.Version-Check.outputs.version }}_windows_x86_64
          path: artifacts

      - name: Organize release artifacts
        env:
          VERSION: ${{ needs.Version-Check.outputs.version }}
        run: |
          mkdir -p release-artifacts
          
          # Copy only Windows x64 portable artifact
          find artifacts -name "SUESMC-Client_${{ env.VERSION }}_windows_x86_64_portable.exe" -exec cp {} release-artifacts/ \;
          
          echo "Final release artifacts:"
          ls -la release-artifacts/

      # Skip private remote server upload in fork

      - name: Generate Changelog
        id: changelog
        run: |
          pip install requests packaging
          python scripts/release/generate_changelog_draft.py > release-notes.md
        shell: bash

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.Version-Check.outputs.version }}
        run: |
          RELEASE_TAG="v${{ env.VERSION }}"
          TITLE="SUESMC-Client ${{ env.VERSION }} (Windows x64 portable)"

          # Create the release with Windows x64 portable only
          gh release create "$RELEASE_TAG" \
            --title "$TITLE" \
            --draft \
            $PRERELEASE \
            --notes-file release-notes.md \
            ./release-artifacts/*
